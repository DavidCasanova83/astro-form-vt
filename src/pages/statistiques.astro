---
import Header from '../components/Header.astro';
import "../styles/global.css";
---

<html lang="fr">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="UTF-8" />
    <title>Statistiques détaillées</title>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100 text-gray-800 min-h-screen flex flex-col items-center justify-start">
    <Header />
    <main class="container mx-auto p-6 max-w-4xl bg-white shadow-lg rounded-lg text-center"
        x-data="{
            count: 0, // Nombre total de formulaires envoyés
            forms: [], // Liste des formulaires récupérés depuis l'API
            cities: {}, // Stocke le nombre de demandes par ville
            profiles: {}, // Stocke le nombre de profils
            contactModes: {}, // Stocke le nombre de contacts par mode
            departments: {}, // Stocke le nombre de demandes par département
            ageGroups: {}, // Stocke le nombre de demandes par tranche d'âge
            specificRequests: {}, // Stocke le nombre de demandes spécifiques
            generalRequests: {}, // Stocke le nombre de demandes générales
            otherRequests: {}, // Stocke le nombre de demandes autres
            
            // Fonction pour récupérer les données depuis les API
            fetchData() {
                fetch('/api/statistics')
                    .then(response => response.json())
                    .then(data => { if (data.success) this.count = data.count; });
                
                fetch('/api/getAllForms')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.forms = data.data;
                            this.processData();
                        }
                    });
            },
            
            // Fonction pour traiter les données récupérées
            processData() {
                this.cities = {};
                this.profiles = {};
                this.contactModes = {};
                this.departments = {};
                this.ageGroups = {};
                this.specificRequests = {};
                this.generalRequests = {};
                this.otherRequests = {};
                
                // Parcours chaque formulaire et compte les occurrences
                this.forms.forEach(form => {
                    this.cities[form.city] = (this.cities[form.city] || 0) + 1;
                    this.profiles[form.profile] = (this.profiles[form.profile] || 0) + 1;
                    this.contactModes[form.contactMode] = (this.contactModes[form.contactMode] || 0) + 1;
                    this.departments[form.department] = (this.departments[form.department] || 0) + 1;
                    this.otherRequests[form.otherRequest] = (this.otherRequests[form.otherRequest] || 0) + 1;
                    
                    form.ageGroups.forEach(age => {
                        this.ageGroups[age] = (this.ageGroups[age] || 0) + 1;
                    });
                    
                    form.specificRequests.forEach(request => {
                        this.specificRequests[request] = (this.specificRequests[request] || 0) + 1;
                    });
                    
                    form.generalRequests.forEach(request => {
                        this.generalRequests[request] = (this.generalRequests[request] || 0) + 1;
                    });
                });
                
                this.renderCharts();
            },
            
            // Fonction pour générer les graphiques avec Chart.js
            renderCharts() {
                setTimeout(() => {
                    // Graphiques supplémentaires
                    new Chart(document.getElementById('departmentChart'), {
                        type: 'bar',
                        data: {
                            labels: Object.keys(this.departments),
                            datasets: [{
                                data: Object.values(this.departments),
                                backgroundColor: '#1E90FF'
                            }]
                        }
                    });
                    
                    new Chart(document.getElementById('ageGroupChart'), {
                        type: 'pie',
                        data: {
                            labels: Object.keys(this.ageGroups),
                            datasets: [{
                                data: Object.values(this.ageGroups),
                                backgroundColor: ['#FF4500', '#32CD32', '#FFD700']
                            }]
                        }
                    });
                }, 500);
            }
        }"
        x-init="fetchData()">

        <h1 class="text-3xl font-bold mb-4">Statistiques détaillées</h1>
        <p class="text-xl">Nombre total de formulaires envoyés : <span class="text-4xl font-bold text-blue-600" x-text="count"></span></p>

        <!-- Nouveaux graphiques -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            <div class="bg-gray-100 p-4 rounded-lg">
                <h2 class="text-lg font-semibold mb-2">Répartition par département</h2>
                <canvas id="departmentChart"></canvas>
            </div>
            <div class="bg-gray-100 p-4 rounded-lg">
                <h2 class="text-lg font-semibold mb-2">Répartition par tranche d'âge</h2>
                <canvas id="ageGroupChart"></canvas>
            </div>
        </div>
    </main>
</body>
</html>
